local dev = true
local key = "YOUR_KEY_HERE"
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- Wait for game to fully load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Wait for player character to spawn
if not player.Character then
    player.CharacterAdded:Wait()
end

-- Wait for HumanoidRootPart to exist
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Clean chat function
function chat(msg)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(msg)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    end
end

-- Function to check if server is up and running
local function checkServerStatus()
    print("Checking server status...")
    
    local success, result = pcall(function()
        local response = game:HttpGet("https://realtime.skinarcade.com")
        return response
    end)
    
    if success then
        local parseSuccess, decoded = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        
        if parseSuccess and decoded and decoded.success == true then
            print("Server is up and running! Received success: true")
            return true
        else
            print("Server response (not success: true):")
            print(result)
            return false
        end
    else
        print("Server check failed:", result)
        return false
    end
end

-- Function to make POST request
local function makePostRequest(url, body)
    local bodyData = body or "NULL"
    
    local success, result = pcall(function()
        local response = game:HttpPost(url, bodyData)
        return response
    end)
    
    if success then
        print("POST Request Result:")
        print(result)
        return result
    else
        print("POST Request failed:", result)
        return nil
    end
end

-- Function to authenticate bot
local function authenticateBot()
    local authData = HttpService:JSONEncode({
        username = player.Name,
        key = key
    })
    
    local response = makePostRequest("https://realtime.skinarcade.com/api/bot/available", authData)
    
    if response then
        local success, decoded = pcall(function()
            return HttpService:JSONDecode(response)
        end)
        
        if success and decoded and decoded.success == true then
            print("Bot authentication successful!")
            return true
        else
            print("Authentication failed - invalid response")
            return false
        end
    else
        print("Authentication failed - no response")
        return false
    end
end

-- Function to teleport player and announce readiness
local function teleportAndAnnounce()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = Vector3.new(86.81375885009766, 2.999999523162842, -13.788054466247559)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        
        print("Player teleported!")
        
        wait(1)
        
        chat("BOT IS READY FOR TRADES!")
    else
        print("Player character or HumanoidRootPart not found")
    end
end

-- Auto-Accept Pet Gifts Setup
local function setupGiftSystem()
    local GiftPetRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("GiftPet")
    local AcceptPetGiftRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("AcceptPetGift")
    
    -- Optional: GiftData module to display nice names
    local GiftData = nil
    local success, result = pcall(function()
        return require(ReplicatedStorage.Data.GiftData)
    end)
    
    if success then
        GiftData = result
    end
    
    -- Listen for incoming gifts
    GiftPetRemote.OnClientEvent:Connect(function(giftId, displayText, senderName)
        -- Auto-accept the gift
        AcceptPetGiftRemote:FireServer(true, giftId)
        
        -- Determine gift name
        local giftName = displayText
        if GiftData then
            for name, info in pairs(GiftData) do
                if info.GiftId == giftId or tostring(info.GiftId) == tostring(giftId) then
                    giftName = info.Display
                    break
                end
            end
        end
        
        -- Chat the received gift
        chat("Thank you " .. senderName .. "! You gifted me " .. giftName)
        
        -- Log it
        print("Thank you @"..senderName.."! You gifted me "..giftName)
    end)
end

-- Main execution
print("Game loaded, starting bot initialization...")

local serverUp = checkServerStatus()

if not serverUp then
    print("Server is not responding correctly, stopping bot initialization.")
    return
end

print("Server check passed, continuing with bot setup...")

-- Check if dev mode is enabled or disabled
if dev then
    print("Dev mode is true, skipping authentication...")
    teleportAndAnnounce()
else
    print("Dev mode is false, authenticating bot...")
    local authSuccess = authenticateBot()
    
    if authSuccess then
        print("Authentication successful, proceeding with bot setup...")
        teleportAndAnnounce()
    else
        print("Authentication failed, bot stopped.")
        return
    end
end

-- Setup the gift system
setupGiftSystem()
